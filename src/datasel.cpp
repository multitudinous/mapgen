#include "datasel.h"
#include "utlgl.h"
#include "globj.h"

//============================================================================
//============================================================================
DataSel::DataSel() :
    _sel(NULL),
    _mx(0),
    _my(0),
    _depth(999999999)
{
}

//============================================================================
//============================================================================
void DataSel::init(int mouseX, int mouseY, bool windows)
{
    _mx = mouseX;
    UtlGL::getPickRay(mouseX, mouseY, &_sray, &_eray, windows, &_my);

    _depth = 99999999;
    _nray = _eray - _sray;
    _nray.Normalize();
}

//============================================================================
//============================================================================
void DataSel::setRay(const vec3d &sray, const vec3d &eray, double depth)
{
    _sray = sray;
    _eray = eray;
    _depth = depth;

    _nray = _eray - _sray;
    _nray.Normalize();
}

//============================================================================
//============================================================================
const vec3d& DataSel::sray() const
{
    return _sray;
}

//============================================================================
//============================================================================
const vec3d& DataSel::eray() const
{
    return _eray;
}

//============================================================================
//============================================================================
const vec3d& DataSel::nray() const
{
    return _nray;
}

//============================================================================
//============================================================================
int DataSel::mx() const
{
    return _mx;
}

//============================================================================
//============================================================================
int DataSel::my() const
{
    return _my;
}

//============================================================================
//============================================================================
GlObj* DataSel::sel()
{
    return _sel;
}

//============================================================================
// depth only needed for 3d selections
//============================================================================
bool DataSel::setSel(GlObj *sel, bool useDepth, double depth)
{
    if (!useDepth)
    {
        _sel = sel;
        return true;
    }

    if (depth < _depth)
    {
        _sel = sel;
        return true;
    }

    return false;
}